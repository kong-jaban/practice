# # 반복문, 함수가 어려운 이유?
# #  -위에서 아래로 내려오는 구조가 아님. 

# 수열 = 수의 나열 (인덱스 1부터 시작)
# 배열 : 수열과 비슷하지만 (인덱스 0부터시작함.)
#  -형태는 []로 둘러쌓여있음.
#  - 길이가 고정되어있음. 
# 리스트 : 배열에 요소 추가/제거 등의 기능을 추가한 것
# ex) a= [123, "abc", True]
# a[0] = 123 , a[1]="abc"
# a[0:2]= [123, "abc"]
# len(a) = 3
# a[start:end:step] > 리스트 호출방법
# a[::-1] > 리스트 반대로 돌리기
# #중첩리스트
# b= [[1,2,3], [4,5],[6,7]]
# b[0] #[1,2,3]
# b[0][0] #1

# ##배열과 쓰는 함수
# # 요소 추가: append(), insert(), extend()
# a= [1,2,3,4]

# a.append(10)#가장 마지막에 원하는 요소 하나 추가
# print(a) # [1,2,3,4,10]

# a.insert(0, 20) #원하는 위치에 요소 하나를 추가
# print(a) #[20,1,2,3,4,10]

# a.extend([5,6,7,8]) #가장 마지막에 요소를 여러개 추가
# print(a) #[20,1,2,3,4,10,5,6,7,8]
#  # a=a+[5,6,7,8]

# # 요소 제거: del, pop(), remove(), clear()

# a=[1,2,3,4,5,6,7]
# del a[0] #제거하고 싶은 인덱스 입력
# print(a) #[2,3,4,5,6,7]

# a.pop() #제거하고싶은 인덱스 입력 (기본값 -1)
# print(a) #[2,3,4,5,6]

# a.remove(3) #제거하고싶은 요소를 입력
# print(a) #[2,4,5,6] #3이 제거됨

# a.clear()
# print(a) #[]

# 요소 정렬: sort()
a= [52, 372, 9, 7, 103, 13, 501, 231]

a.sort()
print(a) #오름차순 출력

a.sort(reverse=True)
print(a) #내림차순 출력


# 요소 존재 확인: in, not in
print(52 in a) #True
print(0 in a) # False
print(52 not in a) #False

