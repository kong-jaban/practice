#64강 - 기본 파일 처리
# 파일처리
# 읽기처리 / 쓰기처리

# # r 읽기
# #(1) 스트림 연결(stream) 
# # 파일 =open("경로", "모드") #w 쓰기모드, a(append) 추가해서 쓰기모드, r 읽기모드
# 파일 = open("파이썬기초/파일처리/test.txt", "r")
# #(2) 스트림을 통해 데이터 통신
# 문자열=파일.read()
# print(문자열)
# #(3) 스트림 해제
# 파일.close()

# # w 쓰기
# with open("파이썬기초/파일처리/a.txt", "w") as 파일:
#     파일.write("안녕하세요")

# # a 추가해서쓰기
# 문자열= input("데이터 입력:")
# 파일 = open("data.txt", "a")
# 파일.write(문자열 +"\n")
# 파일.close
# #문자열로 받은 데이터를 추가해서 data.txt에 저장함.

#####################################
# 65강 - 간단한 CSV 파일 읽고 쓰기

#####################################
# 66강 - 이터러블, 이터레이터, 제너레이터 함수과 제너레이터 표현식
 #"이터러블": 반복할 수 있는 것. 
 #ex) 반복문 뒤에 넣었던 것들(리스트, 튜플, 딕셔너리)
 #"이터레이터":반복하는 녀석 >>이터러블을 만드는 방법 중 하나
 # -next(이터레이터) : 내부의 요소를 꺼낼 수 있음.
 #"제너레이터": 이터레이터를 만드는 방법 중 하나

# #-제너레이터 표현식
# ##리스트내포
# 범위 = range(1, 100+1)
# 리스트내포=[
#     i*i
#     for i in 범위
# ]
# print(리스트내포)
# 제너레이터표현식=(
#     i*i
#     for i in 범위
# )
# print(제너레이터표현식)
# print(next(제너레이터표현식))#1
# print(next(제너레이터표현식))#4
# print(next(제너레이터표현식))#9

#  #-제너레이터 함수
# def 제너레이터함수():
#     for i in range(1, 100+1):
#         yield i*i #yield를 쓰면 제너레이터 함수가 됨. 제너레이터를 호출
# for 요소 in 제너레이터함수():
#     print(요소)

#그냥 리스트와 제너레이터의 차이점????
# >메모리 사용량이 차이가 큼. 
#리스트는 새로운 리스트를 만드는 반면 제너레이터는 기존 리스트를 참고하여 그 값으로 뭔가를 할 뿐.

################################
# 67강 - 가독성과 유지보수성
#가독성: 코드의 이해가 쉽게. feat)주석, 함수
#유지보수 : 코드를 유지하고 보수하는것. 가독성이 좋아야 유지보수도 하기좋음. 

# 68강 - 5-02절 확인문제: 기본 형태
#아놔개어려움..,, ㅡㅡ


